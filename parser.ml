type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | RBRAC
  | LBRAC
  | COLON
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | STAR
  | NOT
  | INC
  | DEC
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | OR
  | AND
  | MOD
  | RETURN
  | TRANS
  | KEYS
  | DFA
  | STACK
  | MAP
  | INT_LITERAL of (int)
  | STRING_LITERAL of (string)
  | TYPE of (string)
  | ID of (string)
  | EOF
  | MAIN
  | STRING
  | INT
  | VOID

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 2 "parser.mly"
 open Type 
# 53 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* RBRAC *);
  264 (* LBRAC *);
  265 (* COLON *);
  266 (* DOT *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* ASSIGN *);
  272 (* STAR *);
  273 (* NOT *);
  274 (* INC *);
  275 (* DEC *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* OR *);
  283 (* AND *);
  284 (* MOD *);
  285 (* RETURN *);
  286 (* TRANS *);
  287 (* KEYS *);
  288 (* DFA *);
  289 (* STACK *);
  290 (* MAP *);
    0 (* EOF *);
  295 (* MAIN *);
  296 (* STRING *);
  297 (* INT *);
  298 (* VOID *);
    0|]

let yytransl_block = [|
  291 (* INT_LITERAL *);
  292 (* STRING_LITERAL *);
  293 (* TYPE *);
  294 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\007\000\007\000\007\000\007\000\008\000\
\008\000\003\000\005\000\005\000\010\000\010\000\010\000\010\000\
\011\000\011\000\006\000\006\000\013\000\013\000\014\000\014\000\
\014\000\014\000\016\000\016\000\015\000\009\000\009\000\017\000\
\017\000\004\000\018\000\018\000\018\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000"

let yylen = "\002\000\
\001\000\002\000\009\000\001\000\001\000\001\000\001\000\001\000\
\001\000\010\000\000\000\002\000\003\000\005\000\005\000\007\000\
\001\000\003\000\000\000\005\000\000\000\002\000\001\000\001\000\
\001\000\002\000\004\000\004\000\003\000\000\000\001\000\001\000\
\003\000\002\000\000\000\003\000\001\000\001\000\001\000\004\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\004\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\006\000\007\000\005\000\004\000\009\000\
\062\000\001\000\000\000\008\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\012\000\000\000\000\000\
\003\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\039\000\000\000\000\000\025\000\000\000\000\000\
\000\000\023\000\024\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\055\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\014\000\000\000\015\000\060\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\018\000\000\000\000\000\
\061\000\059\000\028\000\027\000\040\000\016\000\036\000"

let yydgoto = "\002\000\
\009\000\010\000\011\000\019\000\030\000\036\000\063\000\013\000\
\025\000\032\000\061\000\055\000\056\000\057\000\058\000\059\000\
\026\000\099\000"

let yysindex = "\009\000\
\065\255\000\000\234\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\255\000\000\245\254\022\255\000\000\011\255\
\158\255\058\255\060\255\016\255\158\255\061\255\000\000\000\000\
\068\255\071\255\158\255\070\255\158\255\048\255\050\255\158\255\
\158\255\000\000\090\255\095\255\008\255\000\000\048\255\049\255\
\000\000\000\000\063\255\091\255\097\255\091\255\091\255\091\255\
\091\255\000\000\000\000\005\255\009\255\000\000\029\000\099\255\
\049\255\000\000\000\000\103\255\007\255\017\255\108\255\057\000\
\000\000\032\001\051\255\051\255\085\000\091\255\091\255\079\255\
\091\255\000\000\091\255\091\255\091\255\091\255\000\000\000\000\
\091\255\091\255\091\255\091\255\091\255\091\255\091\255\091\255\
\091\255\048\255\000\000\063\255\000\000\091\255\000\000\000\000\
\000\000\138\001\120\255\160\001\110\255\113\000\058\001\146\255\
\146\255\051\255\051\255\178\001\178\001\196\001\196\001\196\001\
\196\001\117\001\117\001\051\255\000\000\000\000\141\000\091\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\134\255\000\000\000\000\000\000\
\000\000\139\255\010\255\000\000\000\000\138\255\000\000\010\255\
\010\255\000\000\000\000\000\000\000\000\000\000\138\255\152\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\169\000\000\000\000\000\000\000\000\000\
\152\255\000\000\000\000\015\255\000\000\127\255\000\000\000\000\
\000\000\000\000\155\255\183\255\000\000\141\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\138\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\160\255\000\000\000\000\000\000\000\000\000\000\197\000\
\224\000\211\255\239\255\052\255\115\255\016\001\086\001\093\001\
\118\001\236\000\007\001\011\000\000\000\000\000\000\000\141\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\159\000\000\000\000\000\247\255\047\000\223\255\035\000\000\000\
\000\000\217\255\079\000\212\255\115\000\000\000\000\000\000\000\
\000\000\053\000"

let yytablesize = 736
let yytable = "\064\000\
\054\000\066\000\067\000\068\000\069\000\045\000\070\000\093\000\
\042\000\001\000\073\000\024\000\071\000\043\000\011\000\017\000\
\014\000\054\000\070\000\034\000\016\000\094\000\044\000\017\000\
\071\000\098\000\100\000\102\000\103\000\017\000\104\000\105\000\
\106\000\107\000\072\000\012\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\012\000\037\000\011\000\
\018\000\119\000\046\000\020\000\046\000\023\000\046\000\020\000\
\117\000\046\000\046\000\021\000\047\000\031\000\022\000\020\000\
\027\000\048\000\031\000\031\000\079\000\080\000\028\000\046\000\
\046\000\033\000\053\000\098\000\029\000\049\000\038\000\039\000\
\046\000\004\000\005\000\050\000\051\000\035\000\052\000\037\000\
\006\000\007\000\047\000\053\000\046\000\040\000\101\000\048\000\
\003\000\004\000\005\000\041\000\060\000\065\000\047\000\090\000\
\006\000\007\000\008\000\048\000\092\000\073\000\123\000\004\000\
\005\000\050\000\051\000\047\000\062\000\047\000\006\000\007\000\
\047\000\047\000\121\000\004\000\005\000\050\000\051\000\041\000\
\062\000\041\000\006\000\007\000\041\000\041\000\047\000\047\000\
\030\000\041\000\041\000\041\000\041\000\031\000\019\000\035\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\057\000\021\000\057\000\077\000\078\000\
\057\000\057\000\037\000\079\000\080\000\057\000\057\000\057\000\
\057\000\015\000\118\000\091\000\127\000\089\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\058\000\
\000\000\058\000\000\000\000\000\058\000\058\000\004\000\005\000\
\000\000\058\000\058\000\058\000\058\000\006\000\007\000\000\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\044\000\000\000\044\000\000\000\000\000\
\044\000\044\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\045\000\
\000\000\045\000\000\000\000\000\045\000\045\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\000\000\000\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\052\000\000\000\052\000\000\000\000\000\
\052\000\052\000\000\000\000\000\000\000\052\000\052\000\052\000\
\052\000\000\000\000\000\000\000\000\000\074\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\095\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\097\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\124\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\126\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\041\000\041\000\041\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\042\000\000\000\042\000\
\000\000\000\000\042\000\042\000\000\000\000\000\000\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\043\000\000\000\043\000\000\000\000\000\043\000\043\000\000\000\
\000\000\000\000\043\000\043\000\054\000\000\000\054\000\000\000\
\000\000\054\000\054\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\000\000\000\000\000\000\000\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\053\000\
\000\000\053\000\000\000\000\000\053\000\053\000\000\000\000\000\
\048\000\000\000\048\000\000\000\000\000\048\000\048\000\000\000\
\000\000\000\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\096\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\075\000\076\000\077\000\078\000\000\000\000\000\
\000\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\125\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\076\000\077\000\078\000\
\000\000\000\000\000\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\049\000\000\000\
\049\000\000\000\000\000\049\000\049\000\050\000\000\000\050\000\
\000\000\000\000\050\000\050\000\000\000\000\000\000\000\000\000\
\000\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\050\000\050\000\050\000\050\000\050\000\050\000\051\000\000\000\
\051\000\000\000\000\000\051\000\051\000\000\000\000\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\079\000\080\000\
\000\000\051\000\051\000\051\000\051\000\051\000\051\000\120\000\
\089\000\000\000\000\000\000\000\075\000\076\000\077\000\078\000\
\000\000\000\000\000\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\122\000\000\000\
\000\000\000\000\075\000\076\000\077\000\078\000\000\000\000\000\
\000\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\075\000\076\000\077\000\078\000\
\000\000\000\000\000\000\079\000\080\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\075\000\076\000\
\077\000\078\000\000\000\000\000\000\000\079\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\087\000\088\000\089\000"

let yycheck = "\044\000\
\040\000\046\000\047\000\048\000\049\000\039\000\002\001\001\001\
\001\001\001\000\002\001\021\000\008\001\006\001\005\001\001\001\
\039\001\057\000\002\001\029\000\032\001\015\001\015\001\002\001\
\008\001\070\000\071\000\072\000\073\000\015\001\075\000\076\000\
\077\000\078\000\030\001\001\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\011\000\038\001\038\001\
\038\001\094\000\002\001\017\000\001\001\038\001\003\001\021\000\
\090\000\006\001\007\001\002\001\012\001\027\000\003\001\029\000\
\004\001\017\001\032\000\033\000\018\001\019\001\003\001\020\001\
\021\001\004\001\040\000\120\000\006\001\029\001\032\000\033\000\
\002\001\033\001\034\001\035\001\036\001\038\001\038\001\038\001\
\040\001\041\001\012\001\057\000\002\001\004\001\016\001\017\001\
\032\001\033\001\034\001\005\001\038\001\005\001\012\001\005\001\
\040\001\041\001\042\001\017\001\006\001\002\001\001\001\033\001\
\034\001\035\001\036\001\001\001\038\001\003\001\040\001\041\001\
\006\001\007\001\003\001\033\001\034\001\035\001\036\001\001\001\
\038\001\003\001\040\001\041\001\006\001\007\001\020\001\021\001\
\003\001\011\001\012\001\013\001\014\001\003\001\005\001\003\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\001\001\005\001\003\001\013\001\014\001\
\006\001\007\001\003\001\018\001\019\001\011\001\012\001\013\001\
\014\001\011\000\092\000\057\000\120\000\028\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\001\001\
\255\255\003\001\255\255\255\255\006\001\007\001\033\001\034\001\
\255\255\011\001\012\001\013\001\014\001\040\001\041\001\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\001\001\255\255\003\001\255\255\255\255\
\006\001\007\001\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\001\001\
\255\255\003\001\255\255\255\255\006\001\007\001\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\001\001\255\255\003\001\255\255\255\255\
\006\001\007\001\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\255\255\255\255\255\255\001\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\255\255\255\255\255\255\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\001\001\255\255\003\001\255\255\255\255\006\001\007\001\255\255\
\255\255\255\255\011\001\012\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\001\001\
\255\255\003\001\255\255\255\255\006\001\007\001\255\255\255\255\
\001\001\255\255\003\001\255\255\255\255\006\001\007\001\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\003\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\003\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\255\255\255\255\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\018\001\019\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\006\001\
\028\001\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\007\001\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\028\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  RBRAC\000\
  LBRAC\000\
  COLON\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  STAR\000\
  NOT\000\
  INC\000\
  DEC\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  OR\000\
  AND\000\
  MOD\000\
  RETURN\000\
  TRANS\000\
  KEYS\000\
  DFA\000\
  STACK\000\
  MAP\000\
  EOF\000\
  MAIN\000\
  STRING\000\
  INT\000\
  VOID\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  STRING_LITERAL\000\
  TYPE\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'main) in
    Obj.repr(
# 32 "parser.mly"
         ([],_1)
# 432 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dfadecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.program) in
    Obj.repr(
# 33 "parser.mly"
                      ( (_1 :: fst _2), snd _2 )
# 440 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'param) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'node_list) in
    Obj.repr(
# 38 "parser.mly"
    ( { return = VOID;
    fname = "main";
    formals = _4;
    body = List.rev _7 :: List.rev _8 })
# 452 "parser.ml"
               : 'main))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
          (Int)
# 458 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
          (String)
# 464 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                (Stack)
# 470 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                (Map)
# 476 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_type) in
    Obj.repr(
# 50 "parser.mly"
             (Datatype(_1))
# 483 "parser.ml"
               : 'ret_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
           (Datatype(Void))
# 489 "parser.ml"
               : 'ret_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'ret_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'node_list) in
    Obj.repr(
# 55 "parser.mly"
    ( { return = _1;
    fname = Ident(_3);
    formals = _5;
    body = List.rev _8 :: List.rev _9 })
# 503 "parser.ml"
               : 'dfadecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
    ([])
# 509 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_list) in
    Obj.repr(
# 63 "parser.mly"
                       ((*A MAGICAL LIST OF VDECLS*))
# 517 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 66 "parser.mly"
                       ( (*declare id*) )
# 525 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 67 "parser.mly"
                                     ( (* declare multiple id's*) )
# 534 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                                   ((*assign expr to id*) )
# 543 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'id_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                                                 ((*Assign several variables to a single expr*))
# 553 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
         ((*for one ID*))
# 560 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 73 "parser.mly"
                       ((*keep getting more ID's*))
# 568 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
    ([])
# 574 "parser.ml"
               : 'node_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'node_list) in
    Obj.repr(
# 77 "parser.mly"
                                           ((*A list of nodes*))
# 583 "parser.ml"
               : 'node_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
 ([])
# 589 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 81 "parser.mly"
                  ()
# 597 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return_stmt) in
    Obj.repr(
# 85 "parser.mly"
             ()
# 604 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'trans_stmt) in
    Obj.repr(
# 86 "parser.mly"
              ()
# 611 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 88 "parser.mly"
         ()
# 618 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
             ()
# 625 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                    ()
# 633 "parser.ml"
               : 'trans_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 93 "parser.mly"
                      ()
# 640 "parser.ml"
               : 'trans_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                      ()
# 647 "parser.ml"
               : 'return_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
    ([])
# 653 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 102 "parser.mly"
                  ( List.rev _1)
# 660 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 105 "parser.mly"
          ( [_1] )
# 667 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 106 "parser.mly"
                              ( _3 :: _1)
# 675 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                  ( Formal(Datatype(_1),Ident(_2)) )
# 683 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
    ([])
# 689 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 113 "parser.mly"
                           ( _1 :: _3 )
# 697 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
           ( [_1] )
# 704 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 117 "parser.mly"
                   ( IntLit(_1)   )
# 711 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
                   ( StringLit(_1))
# 718 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                                ( Cast(Datatype(_1),_3))
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                     ( Variable(Ident(_1))  )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                     ( Binop(_1, Greater,_3))
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 813 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Binop(_1, Mod,   _3) )
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Binop(_1, Or ,   _3) )
# 837 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                            ( (*Unop(PostInc, $1)*) )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                            ( (*Unop(PostDec, $1)*) )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                            ( Unop(Neg, _2) )
# 858 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                            ( Unop(Not, _2) )
# 865 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                            ( (*Maps get element*) )
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                       ( _2 )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 142 "parser.mly"
                                            ((*call a sub dfa*))
# 888 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
