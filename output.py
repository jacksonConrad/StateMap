#########BEGIN AUTOGENERATED FUNCTIONS ###########

from time import sleep

def start():
    #do nothing: just exist as a function for the dfas to initially 
    #point to with `dfa.now` so that we can have correct formatting in
    #state()
    return

def state(dfa):
    return dfa.now.__name__

def concurrent(*dfasNArgs):
    dfas = [dfa(dfasNArgs[i*2+1]) for i,dfa in enumerate(dfasNArgs[::2])]
    finishedDfas = set()
    while len(set(dfas) - finishedDfas):
        for dfa in (set(dfas) - finishedDfas):
            dfa.__class__.now()
        for dfa in (set(dfas) - finishedDfas):
            dfa.__class__.now = dfa.nexT
        finishedDfas = set([dfa for dfa in dfas if dfa.returnVal is not None])
    return [dfa.returnVal for dfa in dfas]

def callDfa(dfaClass, *args):
    dfaInstance = dfaClass(args)
    while dfaInstance.returnVal is None:
        dfaClass.now()
        dfaClass.now = dfaInstance.nexT
    return dfaInstance.returnVal

class EOS:
    def __init__(self):
        return
    def __type__(self):
        return 'EOSType'
    def __str__(self):
        return 'EOS'
    def __eq__(self,other):
        return type(self) == type(other)
    def __ne__(self,other):
        return type(self) != type(other)

########END AUTOGENERATED FUNCTIONS ##############
########BEGIN DFA DEFINITIONS       ##############

class main:
	now = start
	def __init__(self,*args):
		self.returnVal = None
		main.now = self.start
		self.nexT = None
		self.countDown= list()
		self.counter = 0
		while self.returnVal is None:
			main.now()
			main.now = self.nexT
		return
	def state5(self):
		print("Donezoes")
		self.returnVal =  0
	def state4(self):
		if((self.countDown[0] if len(self.countDown) else EOS())==EOS()):
			self.nexT = self.state5
			return
		print("popping like cray")
		(self.countDown.pop(0) if len(self.countDown) else EOS())
		if(1):
			self.nexT = self.state4
			return
	def state3(self):
		print("state3\n")
		print(callDfa(self.red,))
		if(self.counter<1):
			self.nexT = self.state4
			return
		self.counter = self.counter-1
		self.countDown.insert(0,1)
		if(1):
			self.nexT = self.state3
			return
	def state2(self):
		print("state2\n")
		blah = 0
		self.counter = self.counter+1
		if(1):
			self.nexT = self.start
			return
	def start(self):
		print("Hello World!")
		if(self.counter>10):
			self.nexT = self.state3
			return
		if(1):
			self.nexT = self.state2
			return

class red:
	now = start
	def __init__(self,*args):
		self.returnVal = None
		red.now = self.start
		self.nexT = None
		self.fire = "Fire"
		return
	def start(self):
		print("Called red()")
		self.returnVal =  self.fire


#######END DFA DEFINITIONS          #############
if __name__ == '__main__':
    main()
