#########BEGIN AUTOGENERATED FUNCTIONS ###########

from time import sleep

def concurrent(*dfasNArgs):
    dfas = [dfa(dfasNArgs[i*2+1]) for i,dfa in enumerate(dfasNArgs[::2])]
    finishedDfas = set()
    while len(set(dfas) - finishedDfas):
        for dfa in (set(dfas) - finishedDfas):
            dfa.__class__.now()
        for dfa in (set(dfas) - finishedDfas):
            dfa.__class__.now = dfa.nexT
        finishedDfas = set([dfa for dfa in dfas if dfa.returnVal is not None])
    return [dfa.returnVal for dfa in dfas]

def callDfa(dfaClass, *args):
    dfaInstance = dfaClass(args)
    while dfaInstance.returnVal is None:
        dfaClass.now()
        dfaClass.now = dfaInstance.nexT
    return dfaInstance.returnVal

########END AUTOGENERATED FUNCTIONS ##############
########BEGIN DFA DEFINITIONS       ##############

class main:
	def __init__(self,*args):
		self.returnVal = None
		main.now = self.start
		self.nexT = None
		while self.returnVal is None:
			main.now()
			main.now = self.nexT
		return
	def start(self):
		print("Hello World!")
		self.returnVal =  3
		if(1):
			self.nexT = self.start


#######END DFA DEFINITIONS          #############
if __name__ == '__main__':
    main()
